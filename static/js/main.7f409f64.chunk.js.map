{"version":3,"sources":["SeasonDisplay.js","captions.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","Summer","text","arrText","Math","round","random","length","SummerText","iconName","Winter","WinterText","SeasonDispaly","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","map","elem","key","arr","fase","num","snow","Spinner","message","defaultProps","ReactDOM","render","content","_useLocation","_useState","useState","_useState2","Object","slicedToArray","setLat","_useState3","_useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","SeasonDisplay","src_Spinner","document","querySelector"],"mappings":"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","file":"static/js/main.7f409f64.chunk.js","sourcesContent":["import React from \"react\";\nimport { SummerText, WinterText } from \"./captions\";\n\nconst seasonConfig = {\n  Summer: {\n    text: SummerText(),\n    iconName: \"sun\",\n  },\n  Winter: {\n    text: WinterText(),\n    iconName: \"snowflake\",\n  },\n};\n\nconst getSeason = (lat, month) => {\n  // entonces estamos\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"Summer\" : \"Winter\";\n  } else {\n    return lat <= 0 ? \"Summer\" : \"Winter\";\n  }\n};\nconst snow = (iconName) => {\n  const fases = [\"a\", \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  return fases.map((fase) => {\n    return arr.map((num) => (\n      <i\n        key={num}\n        className={`icon-random-${fase} snow${num} ${\n          Math.random() > 0.6 ? \"small\" : \"tiny\"\n        } ${iconName} icon`}\n      />\n    ));\n  });\n};\nconst sunLight = () => {\n  const rays = [1, 2, 3, 4, 5, 6];\n  return (\n    <div className=\"orbit\">\n      <div className=\"circle sun-first-layer\">\n        <div className=\"circle sun-second-layer\">\n          <div className=\"circle the-sun\">\n            {rays.map((elem) => {\n              return <div key={elem} className={`ray-${elem}`}></div>;\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nconst SeasonDispaly = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n  return (\n    <div className={`season-display ${season}`}>\n      {season === \"Summer\" ? sunLight() : snow(iconName)}\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDispaly;\n","export const SummerText = () => {\n  const arrText = [\n    \"Que calorón!!\",\n    \"Un lorca increíble\",\n    \"No se aguanta\",\n    \"Que lindo para estar en la playita\",\n    \"Very caliente!\",\n  ];\n\n  return arrText[Math.round(Math.random() * (arrText.length - 1))];\n};\n\nexport const WinterText = () => {\n  const arrText = [\n    \"Que frío!!\",\n    \"Que fresquete!\",\n    \"Me congelo!!\",\n    \"Necesito una estufita\",\n    \"Very frío!\",\n  ];\n\n  return arrText[Math.round(Math.random() * (arrText.length - 1))];\n};\n","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\nSpinner.defaultProps ={\n    message: 'Cargando...'\n};\n\nexport default Spinner;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\nimport \"./seasonDisplay.css\";\nimport \"./snow.css\";\nimport \"./sun.css\";\nimport useLocation from \"./useLocation\";\n\nconst App = () => {\n  const { lat, errorMessage } = useLocation();\n\n  let content;\n  if (errorMessage) {\n    content = <div>Error: {errorMessage}</div>;\n  } else if (lat) {\n    content = <SeasonDisplay lat={lat} />;\n  } else {\n    content = <Spinner message=\"Acepte la solicitud de ubicación por favor\" />;\n  }\n\n  return <div className=\"border red\">{content}</div>;\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n","import { useState, useEffect } from 'react';\n\nexport default () => {\n    const [lat, setLat] = useState(null);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        window.navigator.geolocation.getCurrentPosition(\n            (position) => setLat(position.coords.latitude),\n            (err) => setErrorMessage(err.message)\n        );\n    }, []);\n\n    return { lat, errorMessage};\n}"],"sourceRoot":""}